import telebot
from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
import random
import time
import json
import os

# üîπ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶®
BOT_TOKEN = "8283235321:AAERGIPDPoye3D0ZD2lW3QRAJ9p3bFCIYO0"

# üîπ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï (‡¶∏‡¶¨‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶•‡¶æ‡¶ï‡¶¨‡ßá)
OWNER_LINK = "https://otieu.com/4/10082724"

bot = telebot.TeleBot(BOT_TOKEN)

# üîπ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤
DATA_FILE = "users.json"

# üîπ ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
last_ads = {}

# --------------------------------------------------

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)

user_channels = load_data()

# --------------------------------------------------
@bot.message_handler(commands=["start"])
def start(message: Message):
    user_id = str(message.from_user.id)

    if user_id not in user_channels:
        user_channels[user_id] = {"channel": None, "links": []}
        save_data(user_channels)

        bot.reply_to(
            message,
            "üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!\n\n‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡•§\n\n‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ @username ‡¶¶‡¶ø‡¶® ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ü‡¶õ‡¶ø‡•§"
        )
    else:
        bot.reply_to(
            message,
            "‚úÖ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ü‡¶ó‡ßá‡¶á ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßã!\n\n‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶§‡ßá /1 /2 /3 ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã‡•§"
        )

# --------------------------------------------------
@bot.message_handler(func=lambda msg: msg.text and msg.text.startswith("@"))
def set_channel(message: Message):
    user_id = str(message.from_user.id)
    channel = message.text.strip()

    if user_id not in user_channels:
        bot.reply_to(message, "‚ö†Ô∏è ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶æ‡¶ì‡•§")
        return

    try:
        member = bot.get_chat_member(channel, message.from_user.id)
        bot_member = bot.get_chat_member(channel, bot.get_me().id)

        if bot_member.status not in ("administrator", "creator"):
            bot.reply_to(message, "üö´ ‡¶Ü‡¶Æ‡¶ø ‡¶ì‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶æ‡•§ ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¶‡¶æ‡¶ì‡•§")
            return

        if member.status not in ("administrator", "creator"):
            bot.reply_to(message, "‚ö†Ô∏è ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ì‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶æ‡•§")
            return
    except Exception as e:
        bot.reply_to(message, f"‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶¨‡¶æ ‡¶Ü‡¶Æ‡¶ø ‡¶ì‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶®‡ßá‡¶á‡•§\n({e})")
        return

    user_channels[user_id]["channel"] = channel
    save_data(user_channels)
    bot.reply_to(message, f"‚úÖ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {channel}")

# --------------------------------------------------
@bot.message_handler(commands=["1", "2", "3"])
def add_link(message: Message):
    user_id = str(message.from_user.id)
    cmd = message.text.split()[0]
    idx = int(cmd.replace("/", ""))

    if user_id not in user_channels:
        bot.reply_to(message, "‚ö†Ô∏è ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá /start ‡¶¶‡¶æ‡¶ì‡•§")
        return

    bot.reply_to(message, f"üîó ‡¶è‡¶ñ‡¶® ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ {idx}-‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶ì:")

    def save_link(msg: Message):
        link = msg.text.strip()
        user_data = user_channels[user_id]

        if len(user_data["links"]) < idx:
            user_data["links"].append(link)
        else:
            user_data["links"][idx - 1] = link

        save_data(user_channels)
        bot.reply_to(msg, f"‚úÖ {idx}-‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶∏‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")

        bot.unregister_message_handler(save_link)

    bot.register_next_step_handler(message, save_link)

# --------------------------------------------------
@bot.channel_post_handler(func=lambda m: True)
def auto_ad(post: Message):
    channel_id = post.chat.id
    username = post.chat.username

    # ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡ßã
    if channel_id in last_ads:
        try:
            bot.delete_message(channel_id, last_ads[channel_id])
        except Exception:
            pass

    # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ
    matched_user = None
    for uid, data in user_channels.items():
        if data.get("channel") == f"@{username}":
            matched_user = data
            break

    # üîπ ‡¶∏‡¶¨ ‡¶≤‡¶ø‡¶Ç‡¶ï (‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü + ‡¶á‡¶â‡¶ú‡¶æ‡¶∞)
    all_links = [OWNER_LINK]
    if matched_user and matched_user["links"]:
        all_links += matched_user["links"]

    # ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ï‡¶¶‡¶Æ‡¶á ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶∞‡ßã ‡¶®‡¶æ
    if not all_links:
        return

    selected_link = random.choice(all_links)

    # üîπ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
    ad_text = (
        "üì¢ **‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶®**\n\n"
        "üí∞ ‡¶á‡¶®‡¶ï‡¶æ‡¶Æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?\n\n"
        "üöÄ ‡¶Ö‡¶´‡¶ø‡¶∏‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá üëá"
    )

    # üîπ ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîó Earn now ü§ë", url=selected_link))

    # üîπ ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶ì
    sent = bot.send_message(
        channel_id,
        ad_text,
        parse_mode="Markdown",
        reply_markup=markup,
        disable_web_page_preview=True
    )

    last_ads[channel_id] = sent.message_id

# --------------------------------------------------
print("ü§ñ Bot is running...")
while True:
    try:
        bot.polling(non_stop=True)
    except Exception as e:
        print(f"Error: {e}")
        time.sleep(5)
